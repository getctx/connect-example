["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$React",["^ ","~$Component",["^ ","~$call",["^ "]],"~$createElement",["^ "],"~$cloneElement",["^ "]],"~$window",["^ ","~$requestAnimationFrame",["^ "],"~$webkitRequestAnimationFrame",["^ "],"~$mozRequestAnimationFrame",["^ "],"~$msRequestAnimationFrame",["^ "]],"~$setTimeout",["^ "],"~$ReactNative",["^ ","~$unstable_batchedUpdates",["^ "]],"~$ReactDOM",["^ ","^?",["^ "],"~$render",["^ "],"~$unmountComponentAtNode",["^ "],"~$hydrate",["^ "],"~$createPortal",["^ "],"~$findDOMNode",["^ "]],"~$Error",["^ "]],"~:use-macros",["^ ","~$call-all","~$rum.util","~$collect","^I","~$collect*","^I"],"~:excludes",["~#set",["~$ref"]],"~:name","~$rum.core","~:imports",null,"~:requires",["^ ","~$rum.cursor","^S","~$gobj","~$goog.object","^U","^U","~$cljsjs.react","^V","~$rum.derived-atom","^W","~$sablono.core","^X","~$cljsjs.react.dom","^Y","~$util","^I","^I","^I","~$cursor","^S","~$derived-atom","^W"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^H","^I","^J","^I","^K","^I"],"~:defs",["^ ","~$mount",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","~:line",214,"~:column",7,"~:end-line",214,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^1=",[["~$component","~$node"]]]]],"~:doc","Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"],"^O","~$rum.core/mount","~:variadic",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",12,"~:method-params",["^1=",[["^1?","^1@"]]],"~:protocol-impl",null,"~:arglists-meta",["^1=",[null,null]],"^19",1,"^18",214,"^1:",214,"~:max-fixed-arity",2,"~:fn-var",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@"]]]]],"^1A","Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"],"~$unmount",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",221,"^19",7,"^1:",221,"^1;",14,"^1<",["^1=",["^1>",["^1=",[["^1@"]]]]],"^1A","Removes component from the DOM tree"],"^O","~$rum.core/unmount","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",14,"^1D",["^1=",[["^1@"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",221,"^1:",221,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1@"]]]]],"^1A","Removes component from the DOM tree"],"~$local",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",283,"^19",7,"^1:",283,"^1;",12,"^1<",["^1=",["^1>",["^1=",[["~$initial"],["^1L","~$key"]]]]],"^1A","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default","~:top-fn",["^ ","^1C",false,"^1G",2,"^1D",["^1=",[["^1L"],["^1L","^1M"]]],"^1<",["^1=",[["^1L"],["^1L","^1M"]]],"^1F",["^1=",[null,null]]]],"^O","~$rum.core/local","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",12,"^1N",["^ ","^1C",false,"^1G",2,"^1D",["^1=",[["^1L"],["^1L","^1M"]]],"^1<",["^1=",[["^1L"],["^1L","^1M"]]],"^1F",["^1=",[null,null]]],"^1D",["^1=",[["^1L"],["^1L","^1M"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",283,"^1:",283,"^1G",2,"^1H",true,"^1<",["^1=",[["^1L"],["^1L","^1M"]]],"^1A","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default"],"~$reactive",["^ ","^O","~$rum.core/reactive","^17","resources/public/cljs/out/rum/core.cljs","^18",304,"^19",1,"^1:",304,"^1;",14,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",304,"^19",6,"^1:",304,"^1;",14],"^1A","Mixin. Works in conjunction with `rum.core/react`","~:tag","~$cljs.core/IMap"],"~$render-all",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",194,"^19",8,"^1:",194,"^1;",18,"~:private",true,"^1<",["^1=",["^1>",["^1=",[["~$queue"]]]]]],"^1U",true,"^O","~$rum.core/render-all","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",18,"^1D",["^1=",[["^1V"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",194,"^1:",194,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1V"]]]]]],"~$ref-node",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",265,"^19",7,"^1:",265,"^1;",15,"^1<",["^1=",["^1>",["^1=",[["~$state","^1M"]]]]],"^1A","Given state and ref handle, returns DOM node associated with ref"],"^O","~$rum.core/ref-node","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",15,"^1D",["^1=",[["^1Y","^1M"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",265,"^1:",265,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1Y","^1M"]]]]],"^1A","Given state and ref handle, returns DOM node associated with ref"],"~$react",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",335,"^19",7,"^1:",335,"^1;",12,"^1<",["^1=",["^1>",["^1=",[["^N"]]]]],"^1A","Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."],"^O","~$rum.core/react","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",12,"^1D",["^1=",[["^N"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",335,"^1:",335,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^N"]]]]],"^1A","Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."],"~$schedule",["^ ","^O","~$rum.core/schedule","^17","resources/public/cljs/out/rum/core.cljs","^18",175,"^19",1,"^1:",175,"^1;",24,"^1U",true,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",175,"^19",16,"^1:",175,"^1;",24,"^1U",true],"^1R",["^M",["~$boolean","~$js","~$function"]]],"~$request-render",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",206,"^19",7,"^1:",206,"^1;",21,"^1<",["^1=",["^1>",["^1=",[["^1?"]]]]],"^1A","Schedules react component to be rendered on next animation frame"],"^O","~$rum.core/request-render","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",21,"^1D",["^1=",[["^1?"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",206,"^1:",206,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1?"]]]]],"^1A","Schedules react component to be rendered on next animation frame"],"~$render-queue",["^ ","^O","~$rum.core/render-queue","^17","resources/public/cljs/out/rum/core.cljs","^18",191,"^19",1,"^1:",191,"^1;",28,"^1U",true,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",191,"^19",16,"^1:",191,"^1;",28,"^1U",true],"^1R","~$any"],"~$portal",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",233,"^19",7,"^1:",233,"^1;",13,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@"]]]]],"^1A","Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"],"^O","~$rum.core/portal","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",13,"^1D",["^1=",[["^1?","^1@"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",233,"^1:",233,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@"]]]]],"^1A","Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"],"~$with-key",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",241,"^19",7,"^1:",241,"^1;",15,"^1<",["^1=",["^1>",["^1=",[["^1?","^1M"]]]]],"^1A","Adds React key to component"],"^O","~$rum.core/with-key","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",15,"^1D",["^1=",[["^1?","^1M"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",241,"^1:",241,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^1M"]]]]],"^1A","Adds React key to component"],"~$extend!",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",20,"^19",7,"^1:",20,"^1;",14,"^1<",["^1=",["^1>",["^1=",[["~$obj","~$props"]]]]]],"^O","~$rum.core/extend!","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",14,"^1D",["^1=",[["^2@","^2A"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",20,"^1:",20,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^2@","^2A"]]]]]],"~$build-defcs",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",163,"^19",7,"^1:",163,"^1;",18,"^1<",["^1=",["^1>",["^1=",[["~$render-body","~$mixins","~$display-name"]]]]]],"^O","~$rum.core/build-defcs","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",18,"^1D",["^1=",[["^2D","^2E","^2F"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",163,"^1:",163,"^1G",3,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^2D","^2E","^2F"]]]]]],"~$*reactions*",["^ ","^O","~$rum.core/*reactions*","^17","resources/public/cljs/out/rum/core.cljs","^18",301,"^19",1,"^1:",301,"^1;",37,"~:dynamic",true,"^1U",true,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",301,"^19",26,"^1:",301,"^1;",37,"^2J",true,"^1U",true]],"^N",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",259,"^19",7,"^1:",259,"^1;",10,"^1<",["^1=",["^1>",["^1=",[["^1Y","^1M"]]]]],"^1A","Given state and ref handle, returns React component"],"^O","~$rum.core/ref","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",10,"^1D",["^1=",[["^1Y","^1M"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",259,"^1:",259,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1Y","^1M"]]]]],"^1A","Given state and ref handle, returns React component"],"~$static",["^ ","^O","~$rum.core/static","^17","resources/public/cljs/out/rum/core.cljs","^18",273,"^19",1,"^1:",273,"^1;",12,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",273,"^19",6,"^1:",273,"^1;",12],"^1A","Mixin. Will avoid re-render if none of component’s arguments have changed.\n   Does equality check (=) on all arguments","^1R","^1S"],"^[",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",406,"^19",7,"^1:",406,"^1;",13,"^1<",["^1=",["^1>",["^1=",[["^N","^1M","~$&","~$options"]]]]],"^1A","Same as `rum.core/cursor-in` but accepts single key instead of path vector","^1N",["^ ","^1C",true,"^1G",2,"^1D",[["^1=",["^N","^1M","^2N"]]],"^1<",["^1=",[["^N","^1M","~$&","^2N"]]],"^1F",["^1=",[null]]]],"^O","~$rum.core/cursor","^1C",true,"^17","resources/public/cljs/out/rum/core.cljs","^1;",13,"^1N",["^ ","^1C",true,"^1G",2,"^1D",[["^1=",["^N","^1M","^2N"]]],"^1<",["^1=",[["^N","^1M","~$&","^2N"]]],"^1F",["^1=",[null]]],"^1D",[["^1=",["^N","^1M","^2N"]]],"^1E",null,"^1F",["^1=",[null]],"^19",1,"^18",406,"^1:",406,"^1G",2,"^1H",true,"^1<",["^1=",[["^N","^1M","~$&","^2N"]]],"^1A","Same as `rum.core/cursor-in` but accepts single key instead of path vector"],"^1Y",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",14,"^19",7,"^1:",14,"^1;",12,"^1<",["^1=",["^1>",["^1=",[["~$comp"]]]]],"^1A","Given React component, returns Rum state associated with it"],"^O","~$rum.core/state","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",12,"^1D",["^1=",[["^2P"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",14,"^1:",14,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^2P"]]]]],"^1A","Given React component, returns Rum state associated with it"],"~$cursor-in",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",386,"^19",7,"^1:",386,"^1;",16,"^1<",["^1=",["^1>",["^1=",[["^N","~$path","~$&",["^ ","~:as","^2N"]]]]]],"^1A","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`","^1N",["^ ","^1C",true,"^1G",2,"^1D",[["^1=",["^N","^2S",["^ ","^2T","^2N"]]]],"^1<",["^1=",[["^N","^2S","~$&",["^ ","^2T","^2N"]]]],"^1F",["^1=",[null]]]],"^O","~$rum.core/cursor-in","^1C",true,"^17","resources/public/cljs/out/rum/core.cljs","^1;",16,"^1N",["^ ","^1C",true,"^1G",2,"^1D",[["^1=",["^N","^2S",["^ ","^2T","^2N"]]]],"^1<",["^1=",[["^N","^2S","~$&",["^ ","^2T","^2N"]]]],"^1F",["^1=",[null]]],"^1D",[["^1=",["^N","^2S",["^ ","^2T","^2N"]]]],"^1E",null,"^1F",["^1=",[null]],"^19",1,"^18",386,"^1:",386,"^1G",2,"^1H",true,"^1<",["^1=",[["^N","^2S","~$&",["^ ","^2T","^2N"]]]],"^1A","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`"],"~$dom-node",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",253,"^19",7,"^1:",253,"^1;",15,"^1<",["^1=",["^1>",["^1=",[["^1Y"]]]]],"^1A","Given state, returns top-level DOM node. Can’t be called during render"],"^O","~$rum.core/dom-node","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",15,"^1D",["^1=",[["^1Y"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",253,"^1:",253,"^1G",1,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1Y"]]]]],"^1A","Given state, returns top-level DOM node. Can’t be called during render"],"~$batch",["^ ","^O","~$rum.core/batch","^17","resources/public/cljs/out/rum/core.cljs","^18",184,"^19",1,"^1:",184,"^1;",21,"^1U",true,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",184,"^19",16,"^1:",184,"^1;",21,"^1U",true],"^1R",["^M",["^24","^25","~$clj-nil"]]],"~$with-ref",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",247,"^19",7,"^1:",247,"^1;",15,"^1<",["^1=",["^1>",["^1=",[["^1?","^N"]]]]],"^1A","Adds React ref (string or callback) to component"],"^O","~$rum.core/with-ref","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",15,"^1D",["^1=",[["^1?","^N"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",247,"^1:",247,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^N"]]]]],"^1A","Adds React ref (string or callback) to component"],"~$build-defc",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",151,"^19",7,"^1:",151,"^1;",17,"^1<",["^1=",["^1>",["^1=",[["^2D","^2E","^2F"]]]]]],"^O","~$rum.core/build-defc","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",17,"^1D",["^1=",[["^2D","^2E","^2F"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",151,"^1:",151,"^1G",3,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^2D","^2E","^2F"]]]]]],"^C",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",227,"^19",7,"^1:",227,"^1;",14,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@"]]]]],"^1A","Hydrates server rendered DOM tree with provided component."],"^O","~$rum.core/hydrate","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",14,"^1D",["^1=",[["^1?","^1@"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",227,"^1:",227,"^1G",2,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^1?","^1@"]]]]],"^1A","Hydrates server rendered DOM tree with provided component."],"~$build-defcc",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",168,"^19",7,"^1:",168,"^1;",18,"^1<",["^1=",["^1>",["^1=",[["^2D","^2E","^2F"]]]]]],"^O","~$rum.core/build-defcc","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",18,"^1D",["^1=",[["^2D","^2E","^2F"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",168,"^1:",168,"^1G",3,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^2D","^2E","^2F"]]]]]],"^10",["^ ","^O","~$rum.core/derived-atom","^17","resources/public/cljs/out/rum/core.cljs","^18",347,"^19",1,"^1:",347,"^1;",37,"~:style/indent",2,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",347,"^19",25,"^1:",347,"^1;",37,"^37",2],"^1A","Use this to create “chains” and acyclic graphs of dependent atoms.\n   `derived-atom` will:\n    - Take N “source” refs\n    - Set up a watch on each of them\n    - Create “sink” atom\n    - When any of source refs changes:\n       - re-run function `f`, passing N dereferenced values of source refs\n       - `reset!` result of `f` to the sink atom\n    - return sink atom\n\n    (def *a (atom 0))\n    (def *b (atom 1))\n    (def *x (derived-atom [*a *b] ::key\n              (fn [a b]\n                (str a \":\" b))))\n    (type *x) ;; => clojure.lang.Atom\n    \\@*x     ;; => 0:1\n    (swap! *a inc)\n    \\@*x     ;; => 1:1\n    (reset! *b 7)\n    \\@*x     ;; => 1:7\n\n   Arguments:\n     refs - sequence of source refs\n     key  - unique key to register watcher, see `clojure.core/add-watch`\n     f    - function that must accept N arguments (same as number of source refs)\n            and return a value to be written to the sink ref.\n            Note: `f` will be called with already dereferenced values\n     opts - optional. Map of:\n       :ref           - Use this as sink ref. By default creates new atom\n       :check-equals? - Do an equality check on each update: `(= @sink (f new-vals))`.\n                        If result of `f` is equal to the old one, do not call `reset!`.\n                        Defaults to `true`. Set to false if calling `=` would be expensive"],"^A",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",200,"^19",8,"^1:",200,"^1;",14,"^1U",true,"^1<",["^1=",["^1>",["^1=",[[]]]]]],"^1U",true,"^O","~$rum.core/render","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",14,"^1D",["^1=",[[]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",200,"^1:",200,"^1G",0,"^1H",true,"^1<",["^1=",["^1>",["^1=",[[]]]]]],"~$empty-queue",["^ ","^O","~$rum.core/empty-queue","^17","resources/public/cljs/out/rum/core.cljs","^18",190,"^19",1,"^1:",190,"^1;",27,"^1U",true,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",190,"^19",16,"^1:",190,"^1;",27,"^1U",true],"^1R","~$cljs.core/IVector"],"~$build-class",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",26,"^19",8,"^1:",26,"^1;",19,"^1U",true,"^1<",["^1=",["^1>",["^1=",[["^A","^2E","^2F"]]]]]],"^1U",true,"^O","~$rum.core/build-class","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",19,"^1D",["^1=",[["^A","^2E","^2F"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",26,"^1:",26,"^1G",3,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^A","^2E","^2F"]]]]]],"~$build-ctor",["^ ","^15",null,"^16",["^ ","^17","/Users/rorygibson/work/personal/connect-example/resources/public/cljs/out/rum/core.cljs","^18",137,"^19",8,"^1:",137,"^1;",18,"^1U",true,"^1<",["^1=",["^1>",["^1=",[["^A","^2E","^2F"]]]]]],"^1U",true,"^O","~$rum.core/build-ctor","^1C",false,"^17","resources/public/cljs/out/rum/core.cljs","^1;",18,"^1D",["^1=",[["^A","^2E","^2F"]]],"^1E",null,"^1F",["^1=",[null,null]],"^19",1,"^18",137,"^1:",137,"^1G",3,"^1H",true,"^1<",["^1=",["^1>",["^1=",[["^A","^2E","^2F"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^P","^P","^X","^X"],"~:cljs.analyzer/constants",["^ ","~:seen",["^M",["~:rum/react-component","~:did-mount","~:will-unmount","^16","~:did-remount","~:rum/class","~:init","~:did-catch","~:child-context","~:rum.reactive/key","~:rum/args","~:before-render","~:did-update","~:key-fn","~:will-mount","~:rum/component-stack","~:will-update","~:class-properties","~:rum/local","~:after-render","~:static-properties","~:wrap-render","~:rum.reactive/refs","~:should-update"]],"~:order",["^3I","^3Q","^3N","^3X","^3E","^3V","^3G","^3Z","^3S","^3O","^3J","^3F","^3K","^3T","^3W","^3D","^3R","^3P","^3M","^3H","^3U","^3L","^3Y","^16"]],"^1A",null]